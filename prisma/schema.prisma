// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  email            String?   @unique
  username         String?   @unique
  password         String?
  role             String    @default("patient")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  name             String?
  emailVerified    DateTime? @map("email_verified")
  image            String?
  localGoogleId    String?   @unique
  googleResourceId String?   @unique
  accounts         Account[]
  sessions         Session[]
  patient          Patient?
  doctor           Doctor?

  @@map("users")
}

model Patient {
  id        String @id @default(cuid())
  userId    String @unique @map("user_id")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  patientData Json?
  history     Json?

  @@map("patients")
  Doctor Doctor[]
}

model Doctor {
  id        String @id @default(cuid())
  userId    String @unique @map("user_id")
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialization String?
  experience     Int?
  patients       Patient[]
  @@map("doctors")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String?
  email      String?
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
